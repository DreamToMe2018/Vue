@{
    ViewData["Title"] = "整理";
}
@section scripts{
    <script>
        // coumputed
        // methods
        // v-model
        // watch
        // v-on
        //  Object.assign({}
        // object

        // component
        Vue.component('todo-item', {
            props: ['text'],
            template:'<div>{{text}}</div>'
        })

        // v-show
        // For優先權比IF大
        var app = new Vue({
            el: '#app',
            data: {
                todos: [
                    { id: 1, text: 'Benny', isCompany: false }, { id: 2, text: 'tiger', isCompany: true }, { id: 3, text: 'panda', isCompany: false }
                ]
            }
        })

        var app2 = new Vue({
            el: '#app2',
            data: {
                todos:[1,2,3,4,5,6,7,8,9,10]
            },
            computed: {
                event1: function () {
                    return this.todos.filter(function (number) {
                        return number % 2 === 0
                    })
                }
            },
            methods: {
                event2: function (number) {
                    var list = [];
                    $(number).each(function (index) {
                        if (this % 2 === 0)
                            list.push(this);
                    })
                    return list
                }
            }
        })

        // html url
        var app3 = new Vue({
            el: '#app3',
            data: {
                html: '<p>heros</p>',
                url: 'http://dojo.telerik.com/eTEwAVoQ'
            }
        })

        // class style
        var class1 = new Vue({
            el: '#class1',
            data: {
                cl: {
                    active: true,
                    'text-danger': false
                }
            },
            computed: {
                classObject: function () {
                    return {
                        active: this.isActive && !this.error,
                        'text-danger': this.error && this.error.type === 'fatal'
                    }
                }
            }
        })

        var comp3 = new Vue({
            el: '#comp3',
            data: {
                question: '',
                answer: '在你問一個問題之前，我不能給你答案！'
            },
            watch: {
                // 如果 `question` 发生改变，这个函数就会运行
                question: function () {
                    //this.answer = '等你停止打字......'
                    this.getAnswer()
                    //this.debouncedGetAnswer()
                }
            },
            //created: function () {
            //    // `_.debounce` 是一个通过 Lodash 限制操作频率的函数。
            //    // 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率
            //    // AJAX 请求直到用户输入完毕才会发出。想要了解更多关于
            //    // `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，
            //    // 请参考：https://lodash.com/docs#debounce
            //    this.debouncedGetAnswer = _.debounce(this.getAnswer, 500)
            //},
            methods: {
                getAnswer: function () {
                    if (this.question.indexOf('?') === -1) {
                        this.answer = '問題通常包含問號。'
                        return
                    }
                    this.answer = 'Thinking...'
                    $.post('/Service/GetAnswer', { question: comp3.question }, function (result) {
                        if (result)
                            return comp3.answer = '回答正確'
                        else
                            return comp3.answer = '錯誤，英文打招呼'
                    }, 'json');
                }
            }
        })

        //var comp1 = new Vue({
        //    el: '#comp1',
        //    data: {
        //        first: 'Hello',
        //        last: 'Vue!'
        //    },
        //    computed: {
        //        fullName: {
        //            // getter
        //            get: function () {
        //                return this.first + ' ' + this.last
        //            },
        //            // setter
        //            set: function (newValue) {
        //                var names = newValue.split(' ')
        //                this.first = names[0]
        //                this.last = names[names.length - 1]
        //            }
        //        }
        //    },
        //    methods: {
        //        touch: function () {
        //            comp1.fullName = 'Winner'
        //        }
        //    }
        //})
    </script>
}
<div id="app">
    <div v-for="todo in todos" v-if="todo.isCompany" v-bind:key="todo.id">
        <p>Text:{{todo.text}}</p>
        <p>isCompany:{{todo.isCompany}}</p>
        <p v-show="!todo.isCompany">Look at me</p>
    </div>
    <hr>
    <todo-item v-for="todo in todos" v-bind:text="todo.text" v-bind:key="todo.id" v-if="todo.isCompany"></todo-item>
    <hr>
    <div v-for="todo in todos" v-if="todo.isCompany" v-bind:key="todo.id">
        <p>Text:{{todo}}</p>
    </div>
</div>
<hr />
<div id="app2">
    <div v-for="todo in event1">
        {{todo}}
    </div>
    <hr>
    <div v-for="todo in event2(todos)">
        {{todo}}
    </div>
</div>
<hr>
<div id="app3">
    <p>{{html}}</p>
    <p v-html="html"></p>
    <hr>
    <p>{{url}}</p>
    <a v-bind:href="url">123456789</a>
</div>
<hr>
<div id="class1" v-bind:class="cl">123</div>
<hr />
<div id="comp3">
    <p>
        問一個是/否的問題：
        <input v-model="question">
    </p>
    <p>{{answer}}</p>
</div>
<hr>
@*<div id="app1">
        <div v-once>{{msg}}</div>
        <button v-on:click="change()">tome</button>
    </div>
    <hr>

    <hr>
    <button id="app3" v-bind:disabled="is">app2</button>
    <hr />*@
@*三元運算*@
@*<div id="app4">
        {{html.split('').reverse().join('') }}
    </div>
    <hr />
    <a id="app5" v-bind:href="url">.....</a>
    <hr />
    <div id="comp">
        {{msg}}
        {{resvermsg}}
        <button v-on:click="resver">555</button>
        {{me}}
    </div>
    <hr />
    <div id="comp1">
        {{fullName}}
        <button v-on:click="touch">555</button>
    </div>*@