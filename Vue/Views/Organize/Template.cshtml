@{
    ViewData["Title"] = "整合範例2";
}
@section scripts{
    <script src="https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js"></script>
    <script>
        var obj = { foo: 'bar' }
        var vm = new Vue({
            el: '#app',
            data: obj,
            created: function () {

            },
            updated: function () {

            },
            destroyed: function () {

            },
            mounted: function () {

            },
            watch: function () {

            }
        })

        Object.freeze(obj)

        //前綴$，以便與用戶定義的property區分開來。
        vm.$data === obj // => true
        vm.$el === document.getElementById('app') // => true

        // 計算屬性和偵聽器
        // computed計算屬性
        // 對於任何復雜邏輯，你都應當使用計算屬性。
        // 不同的是計算屬性是基於它們的響應式依賴進行緩存的。只在相關響應式依賴發生改變時它們才會重新求值。這就意味著只要message還沒有發生改變，多次訪問reversedMessage計算屬性會立即返回之前的計算結果，而不必再次執行函數。
        // 計算屬性有發生變動才會更新，不然都是抓到舊的，方法是每次都會重新執行
        // watch偵聽屬性 會等於computed.fullName
        // computed可設定Get跟SET
        var app2 = new Vue({
            el: '#app2',
            data: {
                message: '我愛瑜子周',
                firstName: 'Foo',
                lastName: 'Bar',
                fullName: 'Foo Bar',
                question: '',
                answer: 'I cannot give you an answer until you ask a question!'
            },
            computed: {
                reversedMessage: function () {
                    return this.message.split('').reverse().join('')
                },
                fullName: function () {
                    return this.firstName + ' ' + this.lastName
                },
                fullNameGetSet: {
                    // getter
                    get: function () {
                        return this.firstName + ' ' + this.lastName
                    },
                    // setter
                    set: function (newValue) {
                        var names = newValue.split(' ')
                        this.firstName = names[0]
                        this.lastName = names[names.length - 1]
                    }
                }
            },
            methods: {
                reversedMessageMethod: function () {
                    return this.message.split('').reverse().join('')
                },
                getAnswer: function () {
                    if (this.question.indexOf('?') === -1) {
                        this.answer = 'Questions usually contain a question mark. ;-)'
                        return
                    }
                    this.answer = 'Thinking...'
                    var vm = this
                    axios.get('https://yesno.wtf/api')
                        .then(function (response) {
                            vm.answer = _.capitalize(response.data.answer)
                        })
                        .catch(function (error) {
                            vm.answer = 'Error! Could not reach the API. ' + error
                        })
                }
            },
            watch: {
                firstName: function (val) {
                    this.fullName = val + ' ' + this.lastName
                },
                lastName: function (val) {
                    this.fullName = this.firstName + ' ' + val
                },
                // 如果 question 發生改變，這個函數就會運行
                question: function (newQuestion, oldQuestion) {
                    this.answer = 'Waiting for you to stop typing...'
                    this.debouncedGetAnswer()
                }
            },
            created: function () {
                // 把物件生出來
                this.debouncedGetAnswer = _.debounce(this.getAnswer, 500)
            },
        })
    </script>
}
<div id="app">
    <p>{{ foo }}</p>
    <p>foo不會更新Object.freeze(obj)</p>
    <button v-on:click="foo = 'baz'">Change it</button>
    <hr />
    <p>生命週期</p>
    <hr />
</div>
<div id="app2">
    <p>計算屬性和偵聽器</p>
    <p>字串相反</p>
    <p>{{message}}</p>
    <p>{{message.split('').reverse().join('')}}</p>
    <p>{{reversedMessage}}</p>
    <p>{{reversedMessageMethod()}}</p>
    <p>Ask a yes/no question:<input v-model="question"></p>
    <p>{{answer}}</p>
</div>