@{
    ViewData["Title"] = "列表渲染";
}
@section scripts{
    <script>
        var app1 = new Vue({
            el: '#app1',
            data: {
                items: [
                    { message: 'Qoo' },
                    { message: 'Zoo' }
                ]
            }
        })

        var app2 = new Vue({
            el: '#app2',
            data: {
                parentMessage: 'Parent',
                items: [
                    { message: 'Qoo' },
                    { message: 'Zoo' }
                ]
            }
        })

        var app3 = new Vue({
            el: '#app3',
            data: {
                object: {
                    firstName: 'John',
                    lastName: 'Doe',
                    age: 30
                }
            }
        })

        var app4 = new Vue({
            el: '#app4',
            data: {
                parentMessage: 'Parent',
                items: [
                    { id: 1, message: 'Qoo' },
                    { Id: 2, message: 'Zoo' }
                ]
            }
        })

        // 他會去把舊的資料返回一個新的，但假如是裡面本來就有的他就會去替換
        // .match(/Qoo/) 要加/ Qoo是指裡面的資料 /
        app1.items = app1.items.filter(function (item) {
            return item.message.match(/Qoo/)
        })

        var app5 = new Vue({
            el: '#app5',
            data: {
                items: ['a', 'b', 'c']
            }
        })

        // 为了解决第一类问题，以下两种方式都可以实现和 vm.items[indexOfItem] = newValue 相同的效果，同时也将触发状态更新：
        function VueSet() {
            // .set(items,indexOfItem,newValue)
            Vue.set(app5.items, 1, '995')
            //可以使用 vm.$set 实例方法，该方法是全局方法 Vue.set 的一个别名
            //app5.$set(app5.items, 1, '666')
        }

        function VueSetSplice() {
            // .splice(items,indexOfItem,newValue)
            // items 資料 indexOfItem要被刪除幾個假如就不會刪 newValue要加入的資料
            app5.items.splice(app5.items, 2, '886', '888')
            //为了解决第二类问题，你可以使用 splice： 打數字多少就會留下多少個
            //app5.items.splice(2)
        }

        // 不會立即更新
        function VueSetNoReponse() {
            app5.items[1] = 'x' // 不是响应性的 哪個欄位要被改
            app5.items.length = 2 // 不是响应性的 陣列數量
        }

        var app6 = new Vue({
            data: {
                a: 1
            }
        })
        // app6.a 现在是响应式的
        //vm.b = 2  vm.b 不是响应式的
        //对于已经创建的实例，Vue 不能动态添加根级别的响应式属性。但是，可以使用 Vue.set(object, key, value) 方法向嵌套对象添加响应式属性

        // 增加响应式属性屬性
        var app7 = new Vue({
            el: '#app7',
            data: {
                userProfile: {
                    name: 'Anika'
                }
            }
        })

        // 添加一个新的 age 属性到嵌套的 userProfile 对象
        function VueNewType() {
            Vue.set(app7.userProfile, 'age', 27)
            // 相同
            //app7.$set(app7.userProfile, 'age', 27)
        }

        // 添加多个新属性到嵌套的 userProfile 对象
        function VueNewMuliteType() {
            // 不要寫這樣
            //Object.assign(vm.userProfile, {
            //    age: 27,
            //    favoriteColor: 'Vue Green'
            //})

            // Object.assign 沒這方法 要查
            app7.userProfile = Object.assign({}, app7.userProfile, {
                age: 27,
                favoriteColor: 'Vue Green'
            })
        }

        // filter() 方法會建立一個經指定之函式運算後，由原陣列中通過該函式檢驗之元素所構成的新陣列。
        var app8 = new Vue({
            el: '#app8',
            data: {
                numbers: [1, 2, 3, 4, 5, 6, 7, 8]
            },
            computed: {
                evenNumbers: function () {
                    return this.numbers.filter(function (number) {
                        return number % 2 === 0
                    })
                }
            },
            methods: {
                even: function (number) {
                    //return number.filter(function (num) {
                    //    return num % 3 === 0
                    //})
                    var list = [];
                    $(number).each(function (index) {
                        if (this % 2 === 0)
                            list.push(this);
                    })
                    return list
                }
            }
        })

        var app9 = new Vue({
            el: '#app9',
            data: {
                todos: [{ text: 1, is: true }, { text: 2, is: false }, { text: 3, is: true }]
            }
        })

        Vue.component('todo-item', {
            template: '<li>{{ title }}<button v-on:click="$emit(\'remove\')">Remove</button></li>',
            props:['title']
        })

        var app10 = new Vue({
            el: '#app10',
            data: {
                newTodoText: '',
                todos: [
                    { id: 1, title: '我是第一名' }, { id: 2, title: '我是第二名' }, {id:3,title:'史上最強弟子兼一'}
                ],
                nextTodoId: 4
            },
            methods: {
                addNewTodo: function () {
                    this.todos.push({ id: this.nextTodoId++, title: this.newTodoText })
                    this.newTodoText = ''
                }
            }
        })
    </script>
}
<div id="app1">
    <div v-for="item in items">
        {{item.message}}
    </div>
</div>
<hr>
<div id="app2">
    <div v-for="(item,index) in items">
        {{parentMessage}}-{{index}}-{{item.message}}
    </div>
    <hr>
    @*可用of代替in*@
    <div v-for="(item,index) of items">
        {{parentMessage}}-{{index}}-{{item.message}}
    </div>
</div>
<hr>
<div id="app3">
    <div v-for="value in object">
        {{value}}
    </div>
    <hr>
    @*假如是物件可用Key去抓參數名稱*@
    <div v-for="(value,key) in object">
        {{key}}:{{value}}
    </div>
    <hr>
    @*假如是物件可用Key去抓參數名稱index是順序*@
    <div v-for="(value,key,index) in object">
        {{ index }}. {{key}}:{{value}}
    </div>
    <hr>
    @*假如是物件可用Key去抓參數名稱index是順序*@
    @*只有v-for 有Key可用*@
    <div v-for="(value,key,index) in object">
        {{ index }}. {{key}}:{{value}}
    </div>
</div>
<hr>
@*加Key每一項都有唯一的Id 要用v-bind來綁定*@
@*建议尽可能在使用 v-for 时提供 key，除非遍历输出的 DOM 内容非常简单，或者是刻意依赖默认行为以获取性能上的提升。
    因为它是 Vue 识别节点的一个通用机制，key 并不与 v-for 特别关联，key 还具有其他用途，我们将在后面的指南中看到其他用途。*@
<div id="app4">
    <div v-for="(item) in items" v-bind:key="item.Id">
        {{item.message}}
    </div>
</div>
數組更新檢測
<hr>
有以下变异方法 會觸發更新
push() 把資料塞進去
pop()
shift()
unshift()
splice() 把欄位清掉
sort()
reverse() 把資料相反
你打开控制台，然后用前面例子的 items 数组调用变异方法：example1.items.push({ message: 'Baz' }) 。
<hr>
替換數組
非变异方法
例如：filter(), concat() 和 slice()
这些不会改变原始数组，但总是返回一个新数组。当使用非变异方法时，可以用新数组替换旧数组：
example1.items = example1.items.filter(function (item) {
  return item.message.match(/Foo/)
})
<hr>
注意事项
由于 JavaScript 的限制，Vue 不能检测以下变动的数组：
当你利用索引直接设置一个项时，例如：vm.items[indexOfItem] = newValue
当你修改数组的长度时，例如：vm.items.length = newLength
<div id="app5">
    <div v-for="item in items">
        {{item}}
    </div>
    <button onclick="VueSet()">立即更新第一種</button>
    <button onclick="VueSetSplice()">立即更新第二種</button>
    <button onclick="VueSetNoReponse()">不會立即更新</button>
</div>
<hr>
对象更改检测注意事项
<div id="app7">
    <div v-for="(user,key) in userProfile">
        {{key}}-{{user}}
    </div>
    <button onclick="VueNewType()">增加屬性</button>
    <button onclick="VueNewMuliteType()">增加多個屬性</button>
</div>
<hr>
显示过滤/排序结果
有时，我们想要显示一个数组的过滤或排序副本，而不实际改变或重置原始数据。在这种情况下，可以创建返回过滤或排序数组的计算属性。
<div id="app8">
    <div v-for="n in evenNumbers">
        {{n}}
    </div>
    在计算属性不适用的情况下 (例如，在嵌套 v-for 循环中) 你可以使用一个 method 方法：
    <div v-for="n in even(numbers)">
        {{n}}
    </div>
    <p>v-for 也可以取整数。在这种情况下，它将重复多次模板。</p>
    <span v-for="n in 10">{{ n }} </span>
</div>
<hr>
当它们处于同一节点，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。当你想为仅有的一些项渲染节点时，这种优先级的机制会十分有用，如下：
<div id="app9">
    <div v-for="todo in todos" v-if="todo.is">
        {{todo}}
    </div>
</div>
<hr>
<div id="app10">
    @*props裡命名屬性就是要塞得值，Key是v-for才有的*@
    <todo-item v-for="todo in todos" v-bind:title="todo.title" v-bind:key="todo.id"></todo-item>
    <hr>
    @*塞方法*@
    <form v-on:submit.prevent="addNewTodo">
        <label>Add a todo</label>
        <input v-model="newTodoText" placeholder="E.g. Feed the cat" />
        <button>Add</button>
    </form>
    @*注意这里的 is="todo-item" 属性。这种做法在使用 DOM 模板时是十分必要的，因为在 <ul>元素内只有<li>元素会被看作有效内容。这样做实现的效果与 <todo-item>相同，但是可以避开一些潜在的浏览器解析错误*@
    @*在ul裡面li用<todo-item>可能會錯，所以在li裡面用is會等同於用<todo-item>*@
    <ul>
        <li is="todo-item" v-for="(todo,index) in todos" v-bind:title="todo.title" v-bind:key="todo.id" v-on:remove="todos.splice(index,1)">
        </li>
    </ul>
</div>