@{
    ViewData["Title"] = "條件渲染";
}
@section scripts{
    <script>
        var app = new Vue({
            el: '#app',
            data: {
                value: '12345'
            },
            methods: {
                but1: function () {
                    return this.value = '12345'
                },
                but2: function () {
                    return this.value = '54321'
                },
                but3: function () {
                    return this.value = '99999'
                }
            }
        })

        var app1 = new Vue({
            el: '#app1',
            data: {
                loginType: ''
            },
            methods: {
                change: function () {
                    if (this.loginType)
                        return this.loginType = '';
                    else
                        return this.loginType = 'username'
                }
            }

        })

        var app2 = new Vue({
            el: '#app2',
            data: {
                test: true
            },
            methods: {
                change: function () {
                    if (this.test)
                        return this.test = false
                    else
                        return this.test = true
                }
            }

        })

    </script>
}
<div id="app">
    {{value}}
    <p v-if="value == '54321'">Success</p>
    <p v-else-if="value == '12345'">Error</p>
    <p v-else>Boom</p>
    <button v-on:click="but1">12345</button>
    <button v-on:click="but2">54321</button>
    <button v-on:click="but3">99999</button>
</div>
<hr>
<div id="app1">
    <template v-if="loginType === 'username'">
        <label>Username</label>
        @*設Key 就會把input的資料給清空，沒設定的話就會一直存在*@
        @*沒設定Key就會復用*@
        <input placeholder="Enter your username" key="username-input">
    </template>
    <template v-else>
        <label>Email</label>
        <input placeholder="Enter your email address" key="email-input">
    </template>
    <button v-on:click="change">切换按钮</button>
</div>
<hr>
@*v-show 只是简单地切换元素的 CSS 属性 display*@
@*v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。
    v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。
    相比之下，v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。
    一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。*@
<div id="app2">
    <h1 v-show="test">Hello</h1>
    <button v-on:click="change">切换按钮</button>
</div>
@*不推荐同时使用 v-if 和 v-for。请查阅风格指南以获取更多信息。
当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级。请查阅列表渲染指南 以获取详细信息。*@